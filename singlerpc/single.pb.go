// Code generated by protoc-gen-go. DO NOT EDIT.
// source: single.proto

package singlerpc // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type ClientRequest struct {
	Requestmess          string   `protobuf:"bytes,1,opt,name=requestmess,proto3" json:"requestmess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_single_c776e7a27c3ad6ae, []int{0}
}
func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (dst *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(dst, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetRequestmess() string {
	if m != nil {
		return m.Requestmess
	}
	return ""
}

// The response message containing the greetings
type ServerResponse struct {
	Responsemess         string   `protobuf:"bytes,1,opt,name=responsemess,proto3" json:"responsemess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_single_c776e7a27c3ad6ae, []int{1}
}
func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerResponse.Unmarshal(m, b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
}
func (dst *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(dst, src)
}
func (m *ServerResponse) XXX_Size() int {
	return xxx_messageInfo_ServerResponse.Size(m)
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetResponsemess() string {
	if m != nil {
		return m.Responsemess
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "singlerpc.ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "singlerpc.ServerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SingleRpcBloomServiceClient is the client API for SingleRpcBloomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SingleRpcBloomServiceClient interface {
	// Sends a greeting
	SingleRpc(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type singleRpcBloomServiceClient struct {
	cc *grpc.ClientConn
}

func NewSingleRpcBloomServiceClient(cc *grpc.ClientConn) SingleRpcBloomServiceClient {
	return &singleRpcBloomServiceClient{cc}
}

func (c *singleRpcBloomServiceClient) SingleRpc(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/singlerpc.SingleRpcBloomService/SingleRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SingleRpcBloomServiceServer is the server API for SingleRpcBloomService service.
type SingleRpcBloomServiceServer interface {
	// Sends a greeting
	SingleRpc(context.Context, *ClientRequest) (*ServerResponse, error)
}

func RegisterSingleRpcBloomServiceServer(s *grpc.Server, srv SingleRpcBloomServiceServer) {
	s.RegisterService(&_SingleRpcBloomService_serviceDesc, srv)
}

func _SingleRpcBloomService_SingleRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleRpcBloomServiceServer).SingleRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/singlerpc.SingleRpcBloomService/SingleRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleRpcBloomServiceServer).SingleRpc(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SingleRpcBloomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "singlerpc.SingleRpcBloomService",
	HandlerType: (*SingleRpcBloomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleRpc",
			Handler:    _SingleRpcBloomService_SingleRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "single.proto",
}

func init() { proto.RegisterFile("single.proto", fileDescriptor_single_c776e7a27c3ad6ae) }

var fileDescriptor_single_c776e7a27c3ad6ae = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0xcc, 0x4b,
	0xcf, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xf0, 0x8a, 0x0a, 0x92, 0x95,
	0x0c, 0xb9, 0x78, 0x9d, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x14, 0xb8, 0xb8, 0x8b, 0x20, 0xcc, 0xdc, 0xd4, 0xe2, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x64, 0x21, 0x25, 0x13, 0x2e, 0xbe, 0xe0, 0xd4, 0xa2, 0xb2, 0xd4, 0xa2, 0xa0, 0xd4,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x25, 0x2e, 0x9e, 0x22, 0x28, 0x1b, 0x49, 0x13, 0x8a,
	0x98, 0x51, 0x34, 0x97, 0x68, 0x30, 0xd8, 0xd6, 0xa0, 0x82, 0x64, 0xa7, 0x9c, 0xfc, 0xfc, 0x5c,
	0x90, 0x19, 0x99, 0xc9, 0xa9, 0x42, 0x4e, 0x5c, 0x9c, 0x70, 0x09, 0x21, 0x09, 0x3d, 0xb8, 0xd3,
	0xf4, 0x50, 0xdc, 0x25, 0x25, 0x89, 0x24, 0x83, 0x6a, 0xbd, 0x12, 0x83, 0x13, 0x6f, 0x14, 0xb7,
	0x9e, 0x35, 0x5c, 0x3e, 0x89, 0x0d, 0xec, 0x4d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a,
	0xd8, 0x57, 0x7a, 0xf6, 0x00, 0x00, 0x00,
}
